<?xml version="1.0"?>
<!-- <!DOCTYPE project SYSTEM "file:/Developer/Applications/apache-ant-1.6.2/dtd/ant.dtd"> -->
<project name="SimWorkerServer" default="exe" basedir=".">
	<description>Bambi's sim worker standalone with jetty</description>
	<!-- Initializes -->
	<target name="-init" description="Initializes the build. This task is automatically run before building.">
		<echo>Initializing. Using build settings from ./build.properties...</echo>
		<!-- Sets properties -->
		<tstamp/>

		<property name="ant.build.javac.target" value="1.5" />

   		<property name="SimWorker.name" value="SimWorker" />
		<property file="version.properties"/>
		<property name="src.dir" value="./src" />
		<property name="workerscore.src.dir" value="${src.dir}/java/org/cip4/bambi/workers" />
			<property name="sim.src.dir" value="${workerscore.src.dir}/sim" />
			<property name="server.src.dir" value="${src.dir}/java/org/cip4/bambi/server" />
		<property name="web.src.dir" value="./WebContent/workers/sim" />
		<property name="webcore.src.dir" value="./WebContent/core" />
		<property name="web.config.dir" value="${web.src.dir}/config" />
		<property name="test.src.dir" value="./test" />
		<property name="lib.dir" value="${src.dir}/lib" />
		<property name="bin.dir" value="./bin/simworker" />
		<property name="srcbin.dir" value="${src.dir}/bin" />
		<property name="dist.dir" value="./dist/simworker" />
		<property name="build.debug" value="true" />
		<property name="base.filename" value="${SimWorker.name}-${DSTAMP}" />
		<property name="major.filename" value="${SimWorker.name}" />		
		<property name="dist.exe.filename" value="dist/simworker/${SimWorker.name}-exe" />		

		<property name="verbose" value="true" />
		<!-- Sets class path -->
		<path id="project.class.path">
			<pathelement path="${java.class.path}" />
			<fileset dir="${lib.dir}">
				<include name="**/*.jar" />
			</fileset>
		</path>
		<!-- Creates directories -->
		<mkdir dir="${bin.dir}" />
		<mkdir dir="${dist.dir}" />
	</target>
	<target name="compile" depends="-init" description="Compiles source code.">
		<echo>Compiling...</echo>
		<javac destdir="${bin.dir}" debug="${build.debug}">
			<src path="${sim.src.dir}" />
			<src path="${server.src.dir}" />
			<classpath refid="project.class.path" />
			<include name="**/*.java" />
		</javac>
	</target>
	<target name="jar" depends="compile" description="Bundles source code into a JAR file.">
		<echo>Building JAR file...</echo>
		<jar jarfile="${dist.dir}/${base.filename}.jar" basedir="${bin.dir}" >
			<manifest>
				<attribute name="Main-Class" value="org.cip4.bambi.server.BambiServer" />
				<attribute name="Bundle-Name" value="Bambi ${major.version}.${minor.version}.${build.number}" />
				<attribute name="Bundle-Vendor" value="CIP4" />
			</manifest>
    </jar>
	</target>
	<target name="major_jar" depends="jar" description="Builds a JAR archive containing the SimWorker binaries.">
		<echo>Copying JAR file: ${dist.dir}/${major.filename}.jar</echo>
		<copy file="${dist.dir}/${base.filename}.jar" tofile="${dist.dir}/${major.filename}.jar"/>
	</target>

	<target name="clean" depends="-init" description="Cleans the build.">
		<echo>Cleaning...</echo>
		<delete dir="${bin.dir}" />
		<delete dir="${dist.dir}" />
	</target>
	<target name="exe" depends="major_jar" description="Builds web application.">
		<echo>Building Bambi...</echo>
		<buildnumber />
		<echo>Build number: ${build.number}</echo>
		<!-- Builds exploded WAR file -->
		<property name="war.dir" value="${dist.dir}/${major.filename}-exe" />
		<mkdir dir="${war.dir}" />
	    <copy todir="${war.dir}" overwrite="true">
			<fileset dir="${webcore.src.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
		<copy overwrite="true" todir="${war.dir}">
			<fileset dir="${web.src.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
		<copy overwrite="true" todir="${war.dir}/lib" flatten="true">
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
					<exclude name="servlet*.jar" />
					<exclude name="junit*.jar" />
					<exclude name="jsf*.jar" />
					<exclude name="richf*.jar" />
					<exclude name="jstl*.jar" />
					<exclude name="standard*.jar" />
					<exclude name="castor*.jar" />
					<exclude name="el-api.jar" />
					<exclude name="jsp-api.jar" />
				</fileset>
				<fileset dir="${dist.dir}">
					<include name="${base.filename}.jar" />
				</fileset>
			</copy>
		<copy overwrite="true" todir="${war.dir}/bin" flatten="true">
				<fileset dir="${srcbin.dir}">
				</fileset>
		</copy>
		<!-- Update build number and timestamp in xsl stylesheets -->
		<replace file="${war.dir}/deviceList.xsl">
			<replacefilter token="@build.number@" value="${build.number}" />
			<replacefilter token="@build.timestamp@" value="${DSTAMP}" />
			<replacefilter token="@build.majorversion@" value="${major.version}" />
			<replacefilter token="@build.minorversion@" value="${minor.version}" />
		</replace>		
		<replace file="${war.dir}/showDevice.xsl">
			<replacefilter token="@build.number@" value="${build.number}" />
			<replacefilter token="@build.timestamp@" value="${DSTAMP}" />
			<replacefilter token="@build.majorversion@" value="${major.version}" />
			<replacefilter token="@build.minorversion@" value="${minor.version}" />
		</replace>		
		<!-- Builds compressed WAR file -->
		<jar basedir="${war.dir}" destfile="${dist.dir}/${SimWorker.name}.exe.jar" filesonly="false"/>
	</target>

	<target name="test" description="Runs JUnit tests." depends="compile">
			<property name="test.bin.dir" value="${bin.dir}/test" />
			<mkdir dir="${test.bin.dir}" />
			<property name="test.reports.dir" value="${bin.dir}/test-reports" />
			<mkdir dir="${test.reports.dir}" />
			<!-- Compile test cases -->
			<echo>Compiling unit tests...</echo>
			<javac destdir="${test.bin.dir}" debug="${build.debug}" target="1.5" source="1.5">
				<src path="${test.src.dir}" />
				<classpath refid="project.class.path" />
				<classpath path="${bin.dir}" />
				<include name="**/*" />
			</javac>
			<!-- Run test cases -->
			<echo>Running unit tests...</echo>
			<property name="test.working.dir" value="${test.src.dir}" />
			<junit timeout="60000" dir="${test.working.dir}" fork="true" tempdir="${test.bin.dir}" failureproperty="test.failure" errorproperty="test.error">
				<formatter type="plain" />
				<formatter type="xml" />
				<classpath>
					<pathelement path="${java.class.path}" />
					<fileset dir="${lib.dir}">
						<include name="**/*.jar" />
					</fileset>
					<pathelement path="${bin.dir}" />
					<pathelement path="${test.bin.dir}" />
					<pathelement path="${test.src.dir}" />
				</classpath>
				<batchtest fork="yes" todir="${test.reports.dir}">
					<fileset dir="${test.bin.dir}">
						<include name="**/*Test.class" />
					</fileset>
				</batchtest>
			</junit>
			<!-- Delete temp files -->
			<delete>
				<fileset dir="${test.working.dir}">
					<include name="temp*" />
					<include name="temp/*" />
				</fileset>
			</delete>
			<echo>Tests reports can be found in: ${test.reports.dir}</echo>
		</target>
	
	<target name="windist" depends="-init">
		<property name="win.dist.bin.dir" value="${dist.dir}/${base.filename}-win" />
		<copy todir="${win.dist.bin.dir}">
			<fileset dir="${dist.bin.dir}">
				<exclude name="bin" />
				<exclude name="bin/**/*" />
			</fileset>
		</copy>
		<copy file="${src.dir}/bin/windows/Bambi.exe" todir="${win.dist.bin.dir}" />
		<zip destfile="${win.dist.bin.dir}.zip">
			<zipfileset dir="${win.dist.bin.dir}" prefix="${base.filename}-win" />
		</zip>
	</target>
	<target name="windist-compile" depends="exe" description="This target is only need if the EXE file needs to be recompiled.">
		<property name="win.dist.bin.dir" value="${dist.dir}/${base.filename}-win" />
		<echo>Loading JSmooth Ant tasks. Make sure you have jsmoothgen-ant.jar (http://jsmooth.sourceforge.net) installed in ANT_HOME/lib</echo>
		<taskdef name="jsmoothgen" classname="net.charabia.jsmoothgen.ant.JSmoothGen" />
		<copy file="${src.dir}/bin/windows/Bambi.jsmooth" todir="${win.dist.bin.dir}" />
		<jsmoothgen project="${win.dist.bin.dir}/JDFEditor.jsmooth" skeletonroot="${src.dir}/bin/windows/skeletons" />
		<delete file="${win.dist.bin.dir}/Bambi.jsmooth" />
	</target>
	<!-- For special app bundle on the Mac -->
	<target name="appledist" depends="exe" description="Assembles stand alone Macintosh Bundle. Must build on a Mac (>= 10.2).">
		<echo>Building Mac OS X application bundle...</echo>
		<echo>Loading JarBundler Ant tasks. Make sure you have installed http://informagen.com/JarBundler/ in ANT_HOME/lib</echo>
		<echo>if you get  an error such as:
			java.lang.NoClassDefFoundError: org/apache/xml/serialize/OutputFormat
			you should add 'xercesimpl.jar' and 'xml-apis.jar' in ANT_HOME/lib.
			If running from eclipse - also add it to the list of ant jars in window/preferences//ant/runtime//ClassPath/Ant home entries
		</echo>	
		<taskdef name="jarbundler" classname="net.sourceforge.jarbundler.JarBundler" />
		<property name="mac.dist.bin.dir" value="${dist.dir}/${base.filename}-mac" />
		<mkdir dir="${mac.dist.bin.dir}" />
		<jarbundler dir="${dist.dir}" 
			name="Bambi" 
			mainclass="org.cip4.bambi.server.BambiServer" 
			bundleid="org.cip4.bambi.server.BambiServer" 
			jvmversion="1.5+" 
			shortname="Bambi" 
			infostring="Bambi Standalone simulator" signature="Bamb" 
			version="${major.version}.${minor.version}.${build.number}" 
			icon="${src.dir}/bin/macosx/icons/Bambi.icns" 
			vmoptions="-Xmx512m" 
			workingdirectory="$JAVAROOT/.."
			stubfile="${src.dir}/bin/macosx/JavaApplicationStub">
			<jarfileset dir="${lib.dir}">
				<include name="*.jar" />
			</jarfileset>
			<jarfileset dir="${dist.dir}/">
				<include name="${SimWorker.name}.jar" />
			</jarfileset>
			<resourcefileset dir="${dist.exe.filename}">
				<include name="*.*" />
				<include name="css/*" />
				<include name="config/*" />
			</resourcefileset>
	
			<javaproperty name="apple.laf.useScreenMenuBar" value="true" />
		</jarbundler>
		<zip destfile="${dist.dir}/${base.filename}-mac.zip">
			<zipfileset dir="${dist.dir}/Bambi.app" prefix="Bambi.app/" />
			<zipfileset dir="${dist.dir}/Bambi.app" includes="Contents/MacOS/JavaApplicationStub" filemode="755" prefix="Bambi.app" />
		</zip>
	</target>

	<target name="dmgappledist" depends="appledist" description="Creates Disk Image for Apple Dist. Must build on a Mac (>= 10.2)." if="isMacOs">
		<echo>
		this ONLY works from a mac - in case you get errors on windows: duh
		</echo>	
		<delete file="${dist.dir}/JDF Editor.dmg"/>
		<echo>Package appledist</echo>
		<exec executable="hdiutil" spawn="false">
			<arg value="create" />
			<arg value="-srcfolder" />
			<arg value="${dist.dir}/Bambi.app" />
			<arg value="-volname" />
			<arg value="JDF Editor" />
			<arg value="${dist.dir}/Bambi.dmg" />
		</exec>
	</target>

</project>
