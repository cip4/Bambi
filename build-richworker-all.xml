<?xml version="1.0"?>
<!-- <!DOCTYPE project SYSTEM "file:/Developer/Applications/apache-ant-1.6.2/dtd/ant.dtd"> -->
<project name="richworker" default="war" basedir=".">
	<description>Bambi's sim worker</description>
	<!-- Initializes -->
	<target name="-init" description="Initializes the build. This task is automatically run before building.">
		<echo>Initializing. Using build settings from ./build.properties...</echo>
		<!-- Sets properties -->
		<tstamp/>

		<property name="ant.build.javac.target" value="1.5" />

   		<property name="SimWorker.name" value="richworker" />
		<property file="version.properties"/>
		<property name="src.dir" value="./src" />
		<property name="workerscore.src.dir" value="${src.dir}/java/org/cip4/bambi/workers" />
		<property name="sim.src.dir" value="${workerscore.src.dir}/sim" />
		<property name="rich.src.dir" value="${src.dir}/java/org/cip4/bambi/richclient" />
		<property name="resources.dir" value="${src.dir}/resources" />
		<property name="web.src.dir" value="./WebContent/workers/richworker" />
		<property name="webcore.src.dir" value="./WebContent/core" />
		<property name="web.config.dir" value="${web.src.dir}/config" />
		<property name="test.src.dir" value="./test" />
		<property name="lib.dir" value="${src.dir}/lib" />
		<property name="bin.dir" value="./bin/richworker" />
		<property name="tmp.dir" value="./tmp/richworker" />
		<property name="dist.dir" value="./dist/richworker" />
		<property name="build.debug" value="true" />
		<property name="base.filename" value="${SimWorker.name}-${DSTAMP}" />
		<property name="major.filename" value="${SimWorker.name}" />		

		<property name="verbose" value="true" />
		<!-- Sets class path -->
		<path id="project.class.path">
			<pathelement path="${java.class.path}" />
			<fileset dir="${lib.dir}">
				<include name="**/*.jar" />
			</fileset>
		</path>
		<!-- Creates directories -->
		<mkdir dir="${bin.dir}" />
		<mkdir dir="${dist.dir}" />
	</target>
	<target name="compile" depends="-init" description="Compiles source code.">
		<echo>Compiling...</echo>
		<javac destdir="${bin.dir}" debug="${build.debug}">
			<src path="${workerscore.src.dir}" />
			<classpath refid="project.class.path" />
			<include name="*.java" />
		</javac>
		<javac destdir="${bin.dir}" debug="${build.debug}">
			<src path="${sim.src.dir}" />
			<classpath refid="project.class.path" />
			<include name="**/*.java" />
		</javac>
		<javac destdir="${bin.dir}" debug="${build.debug}">
			<src path="${rich.src.dir}" />
			<classpath refid="project.class.path" />
			<include name="**/*.java" />
		</javac>
	</target>
	<target name="jar" depends="compile" description="Bundles source code into a JAR file.">
		<echo>Building JAR file...</echo>
		
		<!-- PREPRESS -->
		<delete dir="${tmp.dir}" />
		<native2ascii encoding="UTF-8" reverse="false" src="${resources.dir}/org/cip4/bambi/richclient" 
					includes="*.properties" dest="${tmp.dir}/org/cip4/bambi/richclient" />
		<copy todir="${tmp.dir}">
			<fileset dir="${resources.dir}">
				<exclude name="**/*.properties" />
			</fileset>
		</copy>
		<replace file="${tmp.dir}/org/cip4/bambi/richclient/config.xml">
			<replacefilter token="[bambi.base.url]" value="http://localhost:8080/richworker-prepress" />
		</replace>
		<jar jarfile="${dist.dir}/${base.filename}-prepress.jar" basedir="${bin.dir}">
			<fileset dir="${tmp.dir}" />
		</jar>
		
		<!-- CONVENTIONAL PRINTING -->
		<delete dir="${tmp.dir}" />
		<native2ascii encoding="UTF-8" reverse="false" src="${resources.dir}/org/cip4/bambi/richclient" 
					includes="*.properties" dest="${tmp.dir}/org/cip4/bambi/richclient" />
		<copy todir="${tmp.dir}">
			<fileset dir="${resources.dir}">
				<exclude name="**/*.properties" />
			</fileset>
		</copy>
		<replace file="${tmp.dir}/org/cip4/bambi/richclient/config.xml">
			<replacefilter token="[bambi.base.url]" value="http://localhost:8080/richworker-print" />
		</replace>
		<jar jarfile="${dist.dir}/${base.filename}-print.jar" basedir="${bin.dir}">
			<fileset dir="${tmp.dir}" />
		</jar>
		
		<!-- FINISHING -->
		<delete dir="${tmp.dir}" />
		<native2ascii encoding="UTF-8" reverse="false" src="${resources.dir}/org/cip4/bambi/richclient" 
					includes="*.properties" dest="${tmp.dir}/org/cip4/bambi/richclient" />
		<copy todir="${tmp.dir}">
			<fileset dir="${resources.dir}">
				<exclude name="**/*.properties" />
			</fileset>
		</copy>
		<replace file="${tmp.dir}/org/cip4/bambi/richclient/config.xml">
			<replacefilter token="[bambi.base.url]" value="http://localhost:8080/richworker-finishing" />
		</replace>
		<jar jarfile="${dist.dir}/${base.filename}-finishing.jar" basedir="${bin.dir}">
			<fileset dir="${tmp.dir}" />
		</jar>
	</target>
	<target name="major_jar" depends="jar" description="Builds a JAR archive containing the SimWorker binaries.">
		<echo>Copying JAR file: ${dist.dir}/${major.filename}.jar</echo>
		<copy file="${dist.dir}/${base.filename}.jar" tofile="${dist.dir}/${major.filename}.jar"/>
	</target>

	<target name="clean" depends="-init" description="Cleans the build.">
		<echo>Cleaning...</echo>
		<delete dir="${bin.dir}" />
		<delete dir="${dist.dir}" />
	</target>
	<target name="war" depends="jar" description="Builds web application.">
		<!-- PREPRESS -->
		<echo>Building Bambi Prepress...</echo>
		<buildnumber />
		<echo>Build number: ${build.number}</echo>
		<!-- Builds exploded WAR file -->
		<property name="prepress.war.dir" value="${dist.dir}/${base.filename}-prepress-war" />
		<mkdir dir="${prepress.war.dir}" />
		<copy todir="${prepress.war.dir}">
			<fileset dir="${web.src.dir}">
				<include name="**/*" />
			</fileset>
			<fileset dir="${webcore.src.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
		<copy todir="${prepress.war.dir}/WEB-INF">
			<fileset dir="${web.src.dir}/WEB-INF">
				<include name="**/*" />
			</fileset>
		</copy>
		<copy todir="${prepress.war.dir}/WEB-INF/lib" flatten="true">
			<fileset dir="${lib.dir}">
				<include name="**/*.jar" />
				<exclude name="servlet*.jar" />
				<exclude name="junit*.jar" />
				<exclude name="el-api.jar" />
				<exclude name="jsp-api.jar" />
			</fileset>
			<fileset dir="${dist.dir}">
				<include name="${base.filename}-prepress.jar" />
			</fileset>
		</copy>
		
		<!-- Update build number and timestamp in overview.jsp -->
		<replace file="${prepress.war.dir}/deviceList.xsl">
			<replacefilter token="@build.number@" value="${build.number}" />
			<replacefilter token="@build.timestamp@" value="${DSTAMP}" />
		</replace>		
		<replace file="${prepress.war.dir}/config/devices.xml">
			<replacefilter token="@bambi.instance@" value="bambi-prepress" />
		</replace>
		<!-- Builds compressed WAR file -->
		<jar basedir="${prepress.war.dir}" destfile="${dist.dir}/${SimWorker.name}-prepress.war" filesonly="false"/>
		
		<!-- CONVENTIONAL PRINTING -->
		<echo>Building Bambi Conventional Printing...</echo>
		<buildnumber />
		<echo>Build number: ${build.number}</echo>
		<!-- Builds exploded WAR file -->
		<property name="print.war.dir" value="${dist.dir}/${base.filename}-print-war" />
		<mkdir dir="${print.war.dir}" />
		<copy todir="${print.war.dir}">
			<fileset dir="${web.src.dir}">
				<include name="**/*" />
			</fileset>
			<fileset dir="${webcore.src.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
		<copy todir="${print.war.dir}/WEB-INF">
			<fileset dir="${web.src.dir}/WEB-INF">
				<include name="**/*" />
			</fileset>
		</copy>
		<copy todir="${print.war.dir}/WEB-INF/lib" flatten="true">
			<fileset dir="${lib.dir}">
				<include name="**/*.jar" />
				<exclude name="servlet*.jar" />
				<exclude name="junit*.jar" />
				<exclude name="el-api.jar" />
				<exclude name="jsp-api.jar" />
			</fileset>
			<fileset dir="${dist.dir}">
				<include name="${base.filename}-print.jar" />
			</fileset>
		</copy>
		
		<!-- Update build number and timestamp in overview.jsp -->
		<replace file="${print.war.dir}/deviceList.xsl">
			<replacefilter token="@build.number@" value="${build.number}" />
			<replacefilter token="@build.timestamp@" value="${DSTAMP}" />
		</replace>	
		<replace file="${print.war.dir}/config/devices.xml">
			<replacefilter token="@bambi.instance@" value="bambi-print" />
		</replace>	
		<!-- Builds compressed WAR file -->
		<jar basedir="${print.war.dir}" destfile="${dist.dir}/${SimWorker.name}-print.war" filesonly="false"/>
		
		<!-- FINISHING -->
		<echo>Building Bambi Finishing...</echo>
		<buildnumber />
		<echo>Build number: ${build.number}</echo>
		<!-- Builds exploded WAR file -->
		<property name="finishing.war.dir" value="${dist.dir}/${base.filename}-finishing-war" />
		<mkdir dir="${finishing.war.dir}" />
		<copy todir="${finishing.war.dir}">
			<fileset dir="${web.src.dir}">
				<include name="**/*" />
			</fileset>
			<fileset dir="${webcore.src.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
		<copy todir="${finishing.war.dir}/WEB-INF">
			<fileset dir="${web.src.dir}/WEB-INF">
				<include name="**/*" />
			</fileset>
		</copy>
		<copy todir="${finishing.war.dir}/WEB-INF/lib" flatten="true">
			<fileset dir="${lib.dir}">
				<include name="**/*.jar" />
				<exclude name="servlet*.jar" />
				<exclude name="junit*.jar" />
				<exclude name="el-api.jar" />
				<exclude name="jsp-api.jar" />
			</fileset>
			<fileset dir="${dist.dir}">
				<include name="${base.filename}-finishing.jar" />
			</fileset>
		</copy>
		
		<!-- Update build number and timestamp in overview.jsp -->
		<replace file="${finishing.war.dir}/deviceList.xsl">
			<replacefilter token="@build.number@" value="${build.number}" />
			<replacefilter token="@build.timestamp@" value="${DSTAMP}" />
		</replace>		
		<replace file="${finishing.war.dir}/config/devices.xml">
			<replacefilter token="@bambi.instance@" value="bambi-finishing" />
		</replace>
		<!-- Builds compressed WAR file -->
		<jar basedir="${finishing.war.dir}" destfile="${dist.dir}/${SimWorker.name}-finishing.war" filesonly="false"/>
	</target>
	<target name="-tomcat-init" depends="-init">
		<echo>Initializing optional targets for deploying directly into Tomcat...</echo>
		<!-- Tomcat tasks -->
		<!-- Configure the context path for this application -->
		<property name="path" value="/${SimWorker.name}" />
		<!-- Configure properties to access the Manager application -->
		<property name="tomcat.url" value="http://localhost:8080/manager" />
		<property name="username" value="tomcat" />
		<property name="password" value="tomcat" />
		<echo>Web app Context Path: ${path}</echo>
		<echo>Tomcat Manager URL: ${tomcat.url}</echo>
		<echo>Tomcat Manager Login: ${username}/${password}</echo>
		<echo>Loading Tomcat's Ant tasks. Make sure you have copied TOMCAT_HOME/server/lib/catalina-ant.jar to ANT_HOME/lib</echo>
		<!-- Configure the custom Ant tasks for the Manager application -->
		<taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask" />
		<taskdef name="install" classname="org.apache.catalina.ant.InstallTask" />
		<taskdef name="list" classname="org.apache.catalina.ant.ListTask" />
		<taskdef name="reload" classname="org.apache.catalina.ant.ReloadTask" />
		<taskdef name="remove" classname="org.apache.catalina.ant.RemoveTask" />
		<taskdef name="resources" classname="org.apache.catalina.ant.ResourcesTask" />
		<taskdef name="roles" classname="org.apache.catalina.ant.RolesTask" />
		<taskdef name="start" classname="org.apache.catalina.ant.StartTask" />
		<taskdef name="stop" classname="org.apache.catalina.ant.StopTask" />
		<taskdef name="undeploy" classname="org.apache.catalina.ant.UndeployTask" />
	</target>
	<target name="install" description="Install web application" depends="-tomcat-init,war">
		<!-- tomcat's server need to be running for this task to complete succesfully -->
		<install url="${tomcat.url}" username="${username}" password="${password}" path="${path}-prepress" war="file:${basedir}/${dist.dir}/${SimWorker.name}-prepress.war" />
		<install url="${tomcat.url}" username="${username}" password="${password}" path="${path}-print" war="file:${basedir}/${dist.dir}/${SimWorker.name}-print.war" />
		<install url="${tomcat.url}" username="${username}" password="${password}" path="${path}-finishing" war="file:${basedir}/${dist.dir}/${SimWorker.name}-finishing.war" />
	</target>
	<target name="redeploy" depends="-tomcat-init,war" description="Undeploys and redeploys the web application">
		<!-- tomcat's server need to be running for this task to complete succesfully -->
		<echo> Undeploys and Deploys the reference web application... </echo>
		<undeploy url="${tomcat.url}" username="${username}" password="${password}" path="${path}-prepress" />
		<undeploy url="${tomcat.url}" username="${username}" password="${password}" path="${path}-print" />
		<undeploy url="${tomcat.url}" username="${username}" password="${password}" path="${path}-finishing" />
		<deploy url="${tomcat.url}" username="${username}" password="${password}" path="${path}-prepress" war="file:${basedir}/${dist.dir}/${SimWorker.name}-prepress.war" />
		<deploy url="${tomcat.url}" username="${username}" password="${password}" path="${path}-print" war="file:${basedir}/${dist.dir}/${SimWorker.name}-print.war" />
		<deploy url="${tomcat.url}" username="${username}" password="${password}" path="${path}-finishing" war="file:${basedir}/${dist.dir}/${SimWorker.name}-finishing.war" />
	</target>
	<target name="test" description="Runs JUnit tests." depends="compile">
			<property name="test.bin.dir" value="${bin.dir}/test" />
			<mkdir dir="${test.bin.dir}" />
			<property name="test.reports.dir" value="${bin.dir}/test-reports" />
			<mkdir dir="${test.reports.dir}" />
			<!-- Compile test cases -->
			<echo>Compiling unit tests...</echo>
			<javac destdir="${test.bin.dir}" debug="${build.debug}" target="1.5" source="1.5">
				<src path="${test.src.dir}" />
				<classpath refid="project.class.path" />
				<classpath path="${bin.dir}" />
				<include name="**/*" />
			</javac>
			<!-- Run test cases -->
			<echo>Running unit tests...</echo>
			<property name="test.working.dir" value="${test.src.dir}" />
			<junit timeout="60000" dir="${test.working.dir}" fork="true" tempdir="${test.bin.dir}" failureproperty="test.failure" errorproperty="test.error">
				<formatter type="plain" />
				<formatter type="xml" />
				<classpath>
					<pathelement path="${java.class.path}" />
					<fileset dir="${lib.dir}">
						<include name="**/*.jar" />
					</fileset>
					<pathelement path="${bin.dir}" />
					<pathelement path="${test.bin.dir}" />
					<pathelement path="${test.src.dir}" />
				</classpath>
				<batchtest fork="yes" todir="${test.reports.dir}">
					<fileset dir="${test.bin.dir}">
						<include name="**/*Test.class" />
					</fileset>
				</batchtest>
			</junit>
			<!-- Delete temp files -->
			<delete>
				<fileset dir="${test.working.dir}">
					<include name="temp*" />
					<include name="temp/*" />
				</fileset>
			</delete>
			<echo>Tests reports can be found in: ${test.reports.dir}</echo>
		</target>
</project>
